require('dotenv').config();const { Queue, QueueEvents } = require('bullmq');const { v4: uuidv4 } = require('uuid');const queueName = process.env.QUEUE_NAME || 'request-queue';const redisConnection = {  host: process.env.REDIS_HOST || '127.0.0.1',  port: parseInt(process.env.REDIS_PORT || '6379', 10),  password: process.env.REDIS_PASSWORD,  db: parseInt(process.env.REDIS_DB || '0', 10),};const queue = new Queue(queueName, { connection: redisConnection });const queueEvents = new QueueEvents(queueName, { connection: redisConnection });async function createAndRunJob(taskName, apiUrl, data) {  const clientJobId = uuidv4();  console.log(`[任务: ${taskName}] 准备发送任务, ID: ${clientJobId}, 数据量: ${data.length}`);  try {    const job = await queue.add(taskName, {      jobId: clientJobId,      url: apiUrl,      data: data,      headers: { 'Accept': 'application/json' },      method: 'GET',    }, {      jobId: clientJobId,      attempts: 2,      backoff: { type: 'fixed', delay: 500 },    });    console.log(`[任务: ${taskName}] 任务已入队, BullMQ Job ID: ${job.id}。等待执行器处理...`);    const result = await job.waitUntilFinished(queueEvents, 60000);    const successfulResults = result.filter(r => r.success);    const failedResults = result.filter(r => !r.success);    console.log(`[任务: ${taskName}] 任务处理完成。`);    return {      taskName,      success: true,      summary: `成功 ${successfulResults.length} 项, 失败 ${failedResults.length} 项。`,      results: result     };  } catch (error) {    console.error(`[任务: ${taskName}] 任务执行失败: ${error.message}`);    return { taskName, success: false, error: error.message, results: [] };  }}async function runMultiJobTest() {  console.log('--- 启动 ProxyBurst 并发测试脚本 ---');  const tasks = [    createAndRunJob('获取用户', 'https://jsonplaceholder.typicode.com/users/{data}', [1, 2, 3, 4, 5]),    createAndRunJob('获取帖子', 'https://jsonplaceholder.typicode.com/posts/{data}', [10, 20, 30, 40, 50]),    createAndRunJob('获取评论', 'https://jsonplaceholder.typicode.com/comments?postId={data}', [1, 2, 3]),    createAndRunJob('无效任务', 'https://api.invalid-host.com/items/{data}', [101, 102]),  ];  const allResults = await Promise.all(tasks);  console.log('\n--- 所有并发任务测试完成 ---');  console.log('测试结果详情:');  allResults.forEach(res => {    console.log('\n----------------------------------------');    console.log(`任务名称: ${res.taskName}`);    console.log(`是否成功: ${res.success}`);    if (res.success) {      console.log(`结果摘要: ${res.summary}`);      const successfulItems = res.results.filter(r => r.success);      if (successfulItems.length > 0) {        console.log('首个成功项的结果示例:');        console.log(JSON.stringify(successfulItems[0].data, null, 2));      }      const failedItems = res.results.filter(r => !r.success);      if (failedItems.length > 0) {        console.log('失败项的错误详情:');        console.log(JSON.stringify(failedItems, null, 2));      }    } else {      console.log(`错误信息: ${res.error}`);    }    console.log(`----------------------------------------`);  });  await queue.close();  await queueEvents.close();  console.log('\n--- 测试脚本执行完毕 ---');}runMultiJobTest();